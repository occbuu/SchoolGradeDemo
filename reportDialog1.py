# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'reportDialog.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import pandas as pd
import matplotlib.pyplot as plt

class Ui_RptDialog(object):
    def setupUi(self, RptDialog):
        RptDialog.setObjectName("RptDialog")
        RptDialog.resize(810, 808)
        self.lblChart1 = QtWidgets.QLabel(RptDialog)
        self.lblChart1.setGeometry(QtCore.QRect(10, 10, 390, 390))
        self.lblChart1.setAutoFillBackground(True)
        self.lblChart1.setFrameShape(QtWidgets.QFrame.Box)
        self.lblChart1.setText("")
        self.lblChart1.setScaledContents(True)
        self.lblChart1.setObjectName("lblChart1")
        self.lblChart2 = QtWidgets.QLabel(RptDialog)
        self.lblChart2.setGeometry(QtCore.QRect(10, 400, 390, 390))
        self.lblChart2.setAutoFillBackground(True)
        self.lblChart2.setFrameShape(QtWidgets.QFrame.Box)
        self.lblChart2.setText("")
        self.lblChart2.setScaledContents(True)
        self.lblChart2.setObjectName("lblChart2")
        self.lblChart3 = QtWidgets.QLabel(RptDialog)
        self.lblChart3.setGeometry(QtCore.QRect(400, 10, 390, 390))
        self.lblChart3.setAutoFillBackground(True)
        self.lblChart3.setFrameShape(QtWidgets.QFrame.Box)
        self.lblChart3.setText("")
        self.lblChart3.setScaledContents(True)
        self.lblChart3.setObjectName("lblChart3")
        self.lblText = QtWidgets.QLabel(RptDialog)
        self.lblText.setGeometry(QtCore.QRect(400, 400, 390, 390))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        self.lblText.setFont(font)
        self.lblText.setAutoFillBackground(True)
        self.lblText.setFrameShape(QtWidgets.QFrame.Box)
        self.lblText.setText("")
        self.lblText.setScaledContents(True)
        self.lblText.setObjectName("lblText")
        ####
        self.drawChart()
        self.getGPASummary()
        ####
        self.retranslateUi(RptDialog)
        QtCore.QMetaObject.connectSlotsByName(RptDialog)

    def retranslateUi(self, RptDialog):
        _translate = QtCore.QCoreApplication.translate
        RptDialog.setWindowTitle(_translate("RptDialog", "Report Summary"))

    @staticmethod
    def get_grade(r):
        if str(r['class'])[:2] == "10":
            return "10"
        if str(r['class'])[:2] == "11":
            return "11"
        if str(r['class'])[:2] == "12":
            return "12"

    def drawChart(self):
        df = pd.read_json("students.json")
        df["grade"] = df.apply(lambda x: self.get_grade(x), axis=1)
        my_colors = ['lightcoral', 'lightsteelblue', 'yellowgreen']
        my_explode = (0.1, 0.1, 0.1)
        i = df['grade'].value_counts().index
        lbl = ['Grade ' + x for x in i]
        v = df['grade'].value_counts().values
        plt.figure(figsize=(3, 3))
        plt.pie(v, labels=lbl, autopct='%1.2f%%',
                startangle=15, shadow=True, colors=my_colors, explode=my_explode)
        plt.title('Ratio of Students by Grade')
        plt.savefig('pie.png', bbox_inches='tight')
        #Histogram
        plt.figure(figsize=(3, 3))
        plt.title('Histogram of Students by GPA')
        plt.xlabel("GPA by 10 points")
        plt.ylabel("No. of students")
        plt.hist(df['gpa'], edgecolor='black', color='darkseagreen')
        plt.savefig('hist.png', bbox_inches='tight')
        ## Boxplot
        males = df.query('gender == True')['gpa']
        females = df.query('gender == False')['gpa']
        cols = [males, females]
        fig, ax = plt.subplots(figsize=(3, 3))
        ax.boxplot(cols)
        plt.xticks([1, 2], ["Male ", "Female "])
        plt.ylabel("GPA Scores")
        plt.title('Boxplot Students by GPA')
        plt.savefig('box.png')
        ### load Image
        pixmap1 = QtGui.QPixmap("pie.png")
        pixmap1 = pixmap1.scaled(self.lblChart1.width(), self.lblChart1.height())
        self.lblChart1.setPixmap(pixmap1)
        pixmap2 = QtGui.QPixmap("hist.png")
        pixmap2 = pixmap2.scaled(self.lblChart2.width(), self.lblChart2.height())
        self.lblChart2.setPixmap(pixmap2)
        pixmap3 = QtGui.QPixmap("box.png")
        pixmap3 = pixmap3.scaled(self.lblChart3.width(), self.lblChart3.height())
        self.lblChart3.setPixmap(pixmap3)

    def getGPASummary(self):
        df = pd.read_json("students.json")
        df["grade"] = df.apply(lambda x: self.get_grade(x), axis=1)
        g10 = df.query('grade == "10"')['gpa']
        g11 = df.query('grade == "11"')['gpa']
        g12 = df.query('grade == "12"')['gpa']
        avg10 = sum(g10) / len(g10)
        avg11 = sum(g11) / len(g11)
        avg12 = sum(g12) / len(g12)
        avg = df.loc[:, 'gpa'].mean()
        max10 = max(g10)
        max11 = max(g11)
        max12 = max(g12)
        totStudent = df.shape[0]
        s =f"Total Number of studenst : {totStudent} \n"
        s += "----------------------------------\n"
        s += "Average GPA \n"
        s += f"\t- All students {avg:.2f}\n"
        s += f"\t- Grade 10 {avg10:.2f}\n"
        s += f"\t- Grade 11 {avg11:.2f}\n"
        s += f"\t- Grade 12 {avg12:.2f}\n"
        s += "----------------------------------\n"
        s += "Highest GPA \n"
        s += f"\t- Grade 10 {max10:.2f}\n"
        s += f"\t- Grade 11 {max11:.2f}\n"
        s += f"\t- Grade 12 {max12:.2f}\n"
        self.lblText.setText(s)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    RptDialog = QtWidgets.QDialog()
    ui = Ui_RptDialog()
    ui.setupUi(RptDialog)
    RptDialog.show()
    sys.exit(app.exec_())
